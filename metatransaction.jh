entity MetaTransaction {
    status MetaTansactonsStatus
    profile String,
    owner String required,
    name String,
    displayDateTimeOnSignatureField Boolean,
    geometreSignatureRequired Boolean,
    logoForGeometreSignatureField Blob,
    metatransactionDuration Integer,
}

entity Documents {
	content Blob required,
    fileName String required,
    title String,
}

entity SignatureField {
	page Integer required,
    x Integer required,
    y Integer required,
    image Blob,
    signerId Long required,
}

entity Signer {
	status SignerStatus
	firstname String required,
    lastname String required,
    organization String,
    emailAddress String required,
    phoneNum String,
    birthDate LocalDate,
    successURL String,
    cancelURL String,
    failURL String,
    callBackUrl String,
    certificateType CertificateType,
    relaunchFrequency Integer,
    lastRelaunch LocalDate,
    sendSignedDocumentsByEmail Boolean,
    textForInvitationEmail String,
    textForRelaunchEmail String,
    textForSignedDocumentsEmail String,
}

entity Transaction {
    status TansactonsStatus,
    idUniversign String,
    urlUniversign String,
}

enum CertificateType {
 Simple, Certified, Advanced
}

enum TansactonsStatus {
 None, 
 Ready, 
 Expired, 
 Canceled, 
 Failed, 
 Completed, 
 Outdated
}

enum MetaTansactonsStatus {
 NONE, CREATE, LAUNCH, CANCELED, FINISH
}

enum SignerStatus {
 NONE, CREATE, LAUNCH, FAILED, CANCELED, FINISH
}

relationship OneToMany {
  MetaTransaction{documents} to Documents{metaTransaction}
}

relationship OneToMany {
  MetaTransaction{signers} to Signer{metaTransaction}
}

relationship OneToMany {
  Documents{documents} to SignatureField{metaTransaction}
}

relationship OneToOne {
  Signer{transaction} to Transaction{signer}
}

paginate MetaTransaction with pagination

service all with serviceImpl

angularSuffix * with parallel